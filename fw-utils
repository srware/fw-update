#!/usr/bin/python

#
# Written by Scott Ware
#
# Version 0.0.1
#

import gobject
import os
import io
import sys
import time
import json
import subprocess
import urllib2
import urlparse
import tarfile
import tempfile
import shutil

MOUNT_POINT = "/update"
UPDATE_DESTINATION = "/update/recovery"
BACKUP_DESTINATION = "/update/recovery/backup"

UPDATE_FORMAT = ['image-name.txt', 'rootfs.tar.bz2', 'boot.hddimg', 'u-boot.bin', 'u-boot.env']

def verify(message):
	print "\n" + message
	verify = raw_input("[Y or N]" + ": ")
  	
	if verify == "Y" or verify == "y":
    		return True
  	elif verify == "N" or verify == "n":
    		return False
  	else:
    		while 1:
      			verify = raw_input("\nPlease enter either [Y or N]: ")

      			if verify == "Y" or verify == "y":
        			return True
      			elif verify == "N" or verify == "n":
        			return False

def is_supported_platform():
    	platform_file = open('/sys/class/dmi/id/board_name', 'r')
    	platform = platform_file.readline()
    	platform_file.close()
	
	if platform is "BODEGA BAY" or "SALT BAY":
    		return True

    	return False

def download_file(url):
	try:
		u = urllib2.urlopen(url)
	except (IOError, ValueError) as error:
		print "Error: Unable to obtain update file. Check file path or url is valid and ensure system is online."
		return None

    	scheme, netloc, path, query, fragment = urlparse.urlsplit(url)
    	f = tempfile.NamedTemporaryFile(delete=False)

        meta = u.info()
        meta_func = meta.getheaders if hasattr(meta, 'getheaders') else meta.get_all
        meta_length = meta_func("Content-Length")
        file_size = None

        if meta_length:
            	file_size = int(meta_length[0])

        file_size_dl = 0
        block_sz = 8192

	try:
        	while True:
            		buffer = u.read(block_sz)
            		if not buffer:
                		break

            		file_size_dl += len(buffer)
            		f.write(buffer)

            		status = "{0:16}".format(file_size_dl)

            		if file_size:
				status += "/{}".format(file_size)
                		status += "   [{0:6.2f}%]".format(file_size_dl * 100 / file_size)

            		sys.stdout.write("\rDownloading Update File: " + status)
			sys.stdout.flush()

	except IOError as error:
		print error.message

	return f.name

def get_update_file():
	dirlist = os.listdir(MOUNT_POINT)

	# Browse update partition for valid update file
	for file_name in dirlist:
		full_file_name = os.path.join(MOUNT_POINT, file_name)
    		if (os.path.isfile(full_file_name)):
			if tarfile.is_tarfile(full_file_name):
				return full_file_name

	return None

def is_backup_available():
	# Check backup directory exists
	if not os.path.exists(BACKUP_DESTINATION):
		return False
	
	# Check backup directory is not empty
	if not os.listdir(BACKUP_DESTINATION):
		return False

	# Check files exist
   	backup_files = os.listdir(BACKUP_DESTINATION)
	if cmp(backup_files, UPDATE_FORMAT) != 0:
		return False

	return True
	
def mount_update_partition():
	# Create mount point if it doesn't exist
	if not os.path.exists(MOUNT_POINT):
    		os.makedirs(MOUNT_POINT)
	# Make sure the update partition is not mounted
	else:
		unmount_update_partition()

	# Mount update partition
	result = subprocess.call("mount -o loop,offset=1048576 /dev/disk/by-partlabel/update " + MOUNT_POINT, shell=True)
	if(result != 0):
		return False

	return True

def unmount_update_partition():
	if os.path.ismount(MOUNT_POINT):
		subprocess.call("umount " + MOUNT_POINT, shell=True)

def print_usage():
	print "\nUsage:\n"
	print "fw-utils update [URL\FILEPATH]: Flash an update image to the device. If no url/path is specified the update partition will be scanned for update files."
	print "fw-utils restore: Restore the device to factory defaults."
	print "fw-utils revert: Flash the previous image back onto the device."
	print "fw-utils help: Prints this usage guide."
	sys.exit(1)

if __name__ == '__main__':
	if len(sys.argv) == 2 and sys.argv[1] == "help":
		print_usage()

	if (len(sys.argv) < 2):
		print "Please specify a command!"
		print_usage()
		
	# Check Platform
	if not is_supported_platform():
		print "Error: This is not a supported platform!"
		sys.exit(1)

	os.system('clear')

	#
	# Update
	#

	if sys.argv[1] == "update":
		
		print "\nUpdate Device Firmware\n=======================\n"

		# Mount update partition
		if not mount_update_partition():
			print "\nError: Unable to mount update partition.\n"
			sys.exit(1)

		# Check for url/path argument
		if (len(sys.argv) < 3):
			update_path = get_update_file()
			if update_path is None:
				print "\nError: No update file found or url/path specified!\n"
				unmount_update_partition()
				sys.exit(1)

		# Check URL/File
		elif os.path.isfile(sys.argv[2]):
			update_path = os.path.abspath(sys.argv[2])
		else:
			update_path = download_file(sys.argv[2])
			if update_path is None:
				unmount_update_partition()
				sys.exit(1)

		print "Checking update file..."
			
		# Check we are working with a valid update file
		if not tarfile.is_tarfile(update_path):
			print "Error: This is not a valid update file!"
			sys.exit(1)

		# Load our update file		
		update_file = tarfile.open(name=update_path)

		# Check contents of update file are valid
		if cmp(update_file.getnames(), UPDATE_FORMAT) != 0:
			print "\nError: This is not a valid update file!\n"
			update_file.close()
			unmount_update_partition()
			sys.exit(1)

		# Verification
		if not verify("Are you sure you would like to update this device (** ALL DATA WILL BE LOST **) ?"):
			update_file.close()
			unmount_update_partition()
			print "\nCancelled\n"
			sys.exit(1)

		# Create update directory if it doesn't exist
		if not os.path.exists(UPDATE_DESTINATION):
    			os.makedirs(UPDATE_DESTINATION)

		# Create backup if necessary
		if len(os.listdir(UPDATE_DESTINATION)) > 0:

			print "\nBacking up current image files..."
			
			# Create backup directory
			if not os.path.exists(BACKUP_DESTINATION):
    				os.makedirs(BACKUP_DESTINATION)

			backup_files = os.listdir(UPDATE_DESTINATION)
			for file_name in backup_files:
    				full_file_name = os.path.join(UPDATE_DESTINATION, file_name)
    				if (os.path.isfile(full_file_name)):
        				shutil.copy(full_file_name, BACKUP_DESTINATION)

		# Extract update file
		print "\nExtracting update files..."
		update_file.extractall(path=UPDATE_DESTINATION)
		
		# Set system to flash image on reboot
		result = subprocess.call("fw_setenv bootargs_mode recovery", shell=True)
		if(result != 0):
			print "\nError: Unable to configure device.\n"
			update_file.close()
			unmount_update_partition()
			sys.exit(1)
			
		update_file.close()
		unmount_update_partition()

		# Reboot device
		print "\nThe device will now reboot and begin flashing."
		print "** DO NOT unplug or disturb the device until flashing is complete **"
		time.sleep(5)
		os.system("reboot")
		

	#
	# Recovery
	#

	elif sys.argv[1] == "restore":

		print "\nRestore Device Firmware\n=======================\n"

		# Verification
		if not verify("Are you sure you want to restore this device from recovery files (** ALL DATA WILL BE LOST **) ?"):
			print "\nCancelled\n"
			sys.exit(1)

		# Set system to flash image on reboot
		result = subprocess.call("fw_setenv bootargs_mode recovery", shell=True)
		if(result != 0):
			print "\nError: Unable to configure device.\n"
			update_file.close()
			unmount_update_partition()
			sys.exit(1)

		# Reboot device
		print "\nThe device will now reboot and begin flashing."
		print "** DO NOT unplug or disturb the device until flashing is complete **"
		time.sleep(5)
		os.system("reboot")

	#
	# Revert
	#

	elif sys.argv[1] == "revert":
		
		print "\nRevert Device Firmware Update\n=======================\n"

		# Mount update partition
		if not mount_update_partition():
			print "\nError: Unable to mount update partition.\n"
			sys.exit(1)

		# Check backup files
		print "Checking backup files..."
		if not is_backup_available():
			print "\nError: No backup files found. Unable to revert to previous firmware.\n"
			unmount_update_partition()
			sys.exit(1)

		# Verification
		if not verify("Are you sure you want to restore this device from backup files (** ALL DATA WILL BE LOST **) ?"):
			print "\nCancelled\n"
			unmount_update_partition()
			sys.exit(1)

		# Copy backup files to update path
		print "\nPreparing backup files..."
		backup_files = os.listdir(BACKUP_DESTINATION)
		for file_name in backup_files:
    			full_file_name = os.path.join(BACKUP_DESTINATION, file_name)
    			if (os.path.isfile(full_file_name)):
        			shutil.copy(full_file_name, UPDATE_DESTINATION)

		# Set system to flash image on reboot
		result = subprocess.call("fw_setenv bootargs_mode recovery", shell=True)
		if(result != 0):
			print "\nError: Unable to configure device.\n"
			update_file.close()
			unmount_update_partition()
			sys.exit(1)

		# Reboot device
		print "\nThe device will now reboot and begin flashing."
		print "** DO NOT unplug or disturb the device until flashing is complete **"
		time.sleep(5)
		os.system("reboot")

